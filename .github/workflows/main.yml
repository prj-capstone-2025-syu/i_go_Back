name: Spring Boot Blue-Green Deploy

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SPRING_PROFILES_ACTIVE: prod
      IMAGE_NAME: igo-backend
      CONTAINER_BLUE: backend-blue
      CONTAINER_GREEN: backend-green
      NGINX_TARGET_FILE: /etc/nginx/conf.d/backend.target # 타겟 파일 경로를 변수로 관리

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate application.properties from secret
        run: |
          mkdir -p ./src/main/resources
          cat <<EOF > ./src/main/resources/application.properties
          ${{ secrets.APPLICATION_PROPERTIES }}
          EOF

      - name: Generate Firebase Admin SDK JSON from secret
        run: |
          mkdir -p ./src/main/resources/firebase
          echo '${{ secrets.FIREBASE_ADMINSDK_JSON }}' > ./src/main/resources/firebase/igo-project-56559-firebase-adminsdk-fbsvc-ddd43a3897.json

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle (Skip Tests)
        run: ./gradlew clean build -x test --no-daemon

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker save ${{ env.IMAGE_NAME }}:${{ github.sha }} -o backend-image.tar

      - name: Copy Docker Image to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "backend-image.tar"
          target: "/home/ubuntu/igo"

      - name: Blue-Green Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/igo
            sudo docker load -i backend-image.tar
            
            # Blue와 Green 컨테이너의 고정 포트 설정
            BLUE_PORT=8080
            GREEN_PORT=8081
            
            # 현재 실행 중인 컨테이너 확인
            if sudo docker ps | grep -q ${{ env.CONTAINER_BLUE }}; then
              ACTIVE_CONTAINER=${{ env.CONTAINER_BLUE }}
              NEW_CONTAINER=${{ env.CONTAINER_GREEN }}
              NEW_PORT=$GREEN_PORT
              echo "Blue is currently active on port $BLUE_PORT, deploying Green on port $GREEN_PORT"
            elif sudo docker ps | grep -q ${{ env.CONTAINER_GREEN }}; then
              ACTIVE_CONTAINER=${{ env.CONTAINER_GREEN }}
              NEW_CONTAINER=${{ env.CONTAINER_BLUE }}
              NEW_PORT=$BLUE_PORT
              echo "Green is currently active on port $GREEN_PORT, deploying Blue on port $BLUE_PORT"
            else
              # 처음 배포인 경우
              ACTIVE_CONTAINER=""
              NEW_CONTAINER=${{ env.CONTAINER_BLUE }}
              NEW_PORT=$BLUE_PORT
              echo "No active container found, deploying Blue on port $BLUE_PORT"
            fi

            echo "Active: $ACTIVE_CONTAINER, Deploying: $NEW_CONTAINER to port $NEW_PORT"
            
            # 새로 배포할 컨테이너가 이미 존재하면 정리 (동일 이름 컨테이너 방지)
            if sudo docker ps -a | grep -q "^.*$NEW_CONTAINER\s"; then
              echo "Cleaning up existing $NEW_CONTAINER container..."
              sudo docker stop $NEW_CONTAINER || true
              sudo docker rm $NEW_CONTAINER || true
            fi
            
            # 새 컨테이너 시작
            sudo docker run -d \
              --name $NEW_CONTAINER \
              -p $NEW_PORT:8080 \
              --restart unless-stopped \
              ${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            echo "Waiting for health check..."
            HEALTH_CHECK_PASSED=false
            for i in $(seq 1 15); do
              if curl -s -f http://localhost:$NEW_PORT/actuator/health > /dev/null; then
                HEALTH_CHECK_PASSED=true
                break
              fi
              echo "Health check attempt $i failed. Retrying in 10 seconds..."
              sleep 10
            done
            
            if [ "$HEALTH_CHECK_PASSED" = "true" ]; then
              echo "Health check passed. Switching traffic..."
              echo "server 127.0.0.1:$NEW_PORT;" | sudo tee ${{ env.NGINX_TARGET_FILE }}
              sudo nginx -t && sudo systemctl reload nginx
              
              if [ ! -z "$ACTIVE_CONTAINER" ] && sudo docker ps | grep -q "^.*$ACTIVE_CONTAINER\s"; then
                echo "Stopping old container: $ACTIVE_CONTAINER"
                sleep 5
                sudo docker stop $ACTIVE_CONTAINER || true
                sudo docker rm $ACTIVE_CONTAINER || true
              fi
              echo "Blue-Green deployment completed successfully!"
            else
              echo "Health check failed after multiple attempts. Check container logs for errors."
              sudo docker logs $NEW_CONTAINER
              echo "Rolling back..."
              sudo docker stop $NEW_CONTAINER || true
              sudo docker rm $NEW_CONTAINER || true
              exit 1
            fi
            
            sudo docker image prune -f
